#!/usr/bin/env ruby

unless File.exists? 'deploy.yml'
  puts "File does not exist: deploy.yml"
  exit
end

require 'rubygems'
require 'yaml'
require 'uri'
require 'net/ftp'
require 'net/ssh'
require 'net/sftp'
require 'tempfile'

def diff_uncommitted(local_path)
  command = "git diff --name-status"
  changed_files(command)
end

# We figure out only which files need updating 
# so don't upload duplicate files
def diff_committed(local_path, revision = nil)
  remote_files = {}
  if revision
    command = "git log --name-status --pretty=oneline #{revision} -- #{local_path}"
  else
    command = "git log -n 1 --name-status --pretty=oneline -- #{local_path}"
  end

#  puts command

  changed_files(command)
end

def changed_files(command)
  files = `#{command}`

  case $?.exitstatus
  when 0, 141
    # pass
  else
    return false
  end

  remote_files = {}

  files.split("\n").reverse.each do |line|
    c = line[0..0]
    c = 'M' if c == 'A'
    
    next unless c == 'M' || c == 'D'

    file = line[2..-1]

    if remote_files.key? file
      if remote_files[file] == 'M' && c == 'D'
          remote_files[file] = 'D'
      elsif remote_files[file] == 'D' && c == 'M'
        remote_files[file] = 'M'
      end
    else
      remote_files[file] = c
    end
  end

  remote_files
end

# Store the current revision
revision = `git rev-parse HEAD`.chomp.strip
revision_file = Tempfile.new revision
revision_file.write revision
revision_file.close

failures = []

services = YAML.load_file 'deploy.yml'
settings = services.delete('settings') || {}

module Git
  class FTP
    def initialize(uri, options)
      @uri = @uri
      @host = options['host']
      @options = options
      @scheme = options['scheme']
      @port = options['port'] || uri.port || 21
    end

    def automate
      self.connect
      if self.diff
        if @options['maintenance_file'] && @options['maintenance_deploy_to']
          @ftp.put(@options['maintenance_file'], @options['maintenance_deploy_to'])
        end
        self.upload
        if @options['maintenance_file'] && @options['maintenance_deploy_to']
          @ftp.put(@options['maintenance_deploy_to'], @options['maintenance_deploy_to'])
        end
        self.disconnect
      end
    end

    def connect
      puts "Connecting to #{@host}"

      @ftp = Net::FTP.new

      if @options['passive']
        @ftp.passive = true
      end

      if @options['debug_mode']
        @ftp.debug_mode = true
      end

      @ftp.binary = true
      @ftp.connect(@options['host'], @options['port'])
      @ftp.login(@options['user'], @options['password'])

      @ftp.chdir(@options['path'].empty? ? @options['chdir'] : '/' + @options['path'])
    end

    def disconnect
      puts 'Uploading REVISION'
      @ftp.put(@options['revision_file'].path, 'REVISION')
      @ftp.quit
    end

    def diff
      # Decide upload strategy
      if ARGV[0] == 'diff' || ARGV[0] == 'd'
        @remote_files = diff_uncommitted(options['local_path'])
      else
        @remote_files = self.diff_commited
      end
    end

    def upload
      directories = {}
      length = @options['length']

      @remote_files.each do |local_file, modifier|
        if length != 0
          if local_file[0...length] != options['local_path']
            next
          else
            remote_file = local_file[length..-1]
          end
        else
          remote_file = local_file
        end

        dir = File.dirname(remote_file)

        unless directories[dir]
          self.mkdir_p(dir)

          directories[dir] = true
        end

        case modifier
        when 'A', 'M'
          puts "Uploading #{local_file}"
          @ftp.put(local_file, remote_file)
        when 'D'
          begin
            puts "Deleting #{local_file}"
            @ftp.delete(remote_file)
          rescue Net::FTPPermError, Net::FTPReplyError => e
            # 
          end
        end
      end
    end

    def get_remote_revision
      remote_revision = false
      @ftp.get('REVISION', Tempfile.new(@host).path) do |line|
        remote_revision = line.strip
      end
      remote_revision
    end

    def diff_commited
      begin
        remote_revision =  self.get_remote_revision

        puts "Remote Revision: #{remote_revision}"
      rescue Net::FTPPermError => e
        raise e unless e.message[0..2] == '550'
        remote_revision = @options['revision']
      end

      if @options['revision'] == remote_revision
        if @options['ignore_if_same_revision']
          puts "Same revision, ignoring"
          return false
        end

        puts "Same revision, overwriting"

        diff_committed(@options['local_path'])
      else
        puts "Uploading new revision"
        diff_committed(@options['local_path'], "#{@options['revision']}...#{remote_revision}")
      end
    end

    def mkdir_p(directory)
      begin
        parent = File.dirname(directory)
        files = @ftp.nlst(parent)

        if directory == "." || files.any? { |a| a == directory }
          return
        else
          puts "Creating Directory #{directory}"
          @ftp.mkdir(directory)
        end
      rescue Net::FTPPermError
        # Pass
      rescue Net::FTPTempError
        begin
          puts "Creating Directory #{directory}"
          @ftp.mkdir(directory)
        rescue Net::FTPPermError => e
          self.mkdir_p(@ftp, File.dirname(directory))
          @ftp.mkdir(directory)
        end
      end
    end
  end
end

services.each do |uri, options|
  next if options['skip']

  puts uri
  uri = URI.parse(uri)

  options['revision'] = revision
  options['revision_file' ] = revision_file
  options['scheme']   = uri.scheme   if uri.scheme
  options['user']     = uri.user     if uri.user
  options['password'] = uri.password if uri.password
  options['host']     = uri.host     if uri.host
  options['port']     = uri.port     if uri.port
  options['path']     = uri.path     if uri.path
  options.merge!(settings)

  pwd = Dir.pwd

  local_path = options['local_path']

  if local_path
    if local_path[0..0] == '/'
      raise "Field `local_path` cannot be an absolute path"
    end
  else
    local_path = ''
  end

  if local_path.length != 0
    if local_path[-1..-1] != '/'
      local_path += '/'
    end

    length = local_path.length
  else
    length = 0
  end

  options['length'] = length

  begin
    case options['scheme']
    when 'sftp'
      sftp = {}
      sftp[:port] = uri.port if uri.port

      Net::SFTP.start(options['host'], options['user'], sftp) do |sftp|
        path = options['path'].empty? ? options['chdir'] : '/' + options['path']

        if ARGV[0] == 'diff' || ARGV[0] == 'd'
          remote_files = diff_uncommitted(local_path)
        else
          remote_revision = false

          begin
            sftp.file.open("#{path}/REVISION", "r") do |f|
              remote_revision = f.gets
            end

            puts "Remote Revision: #{remote_revision}"
          rescue Net::SFTP::StatusException => e
            raise e unless e.code == 2 && e.description == "no such file"
            remote_revision = revision
          end

          if revision == remote_revision
            if settings['ignore_if_same_revision']
              puts "Same revision, ignoring"
              next
            end

            puts "Same revision, overwriting"
            remote_files = diff_committed(local_path)
          else
            remote_files = diff_committed(local_path, "#{revision}...#{remote_revision}")
          end
        end

        next unless remote_files

        remote_files.each do |local_file, modifier|
          if length != 0
            if local_file[0...length] != local_path
              next
            else
              remote_file = local_file[length..-1]
            end
          else
            remote_file = local_file
          end

          case modifier
          when 'A', 'M'
            puts "Uploading #{local_file}"
            sftp.upload!(local_file, path + "/" + remote_file)
          when 'D'
            puts "Deleting #{local_file}"
            sftp.remove(path + "/" + remote_file)
          end
        end

        puts 'Uploading REVISION'
        sftp.upload(revision_file.path, "#{path}/REVISION")
      end
    when 'ftp'
      ftp = Git::FTP.new(uri, options)
      ftp.automate
    end
  rescue Net::FTPTempError, Net::FTPPermError, Errno::ETIMEDOUT, Errno::ECONNRESET => e
    failures << [uri, e]
  end
end

unless failures.empty?
  puts "Failures"
  failures.each do |site|
    uri, e = *site
    puts "#{uri}: #{e.class} #{e}"
  end
end

revision_file.delete
